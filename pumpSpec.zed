\documentclass{article}
\usepackage{czt}

\begin{document}
\begin{zsection}
  \SECTION pumpSpec \parents standard\_toolkit
\end{zsection}

This file covers the infusion pump project in the Models class

This type represents the different problems
possible in the line.  occlusion means the 
line is plugged or pinched.  out\_of\_medicine
means that the line does not have 
\begin{zed}
  Problem ::= occlusion | out\_of\_medicine
\end{zed}

This type represents the possible states of the
alarm for the line. If the alarm is sounding,
it means there exists a problem with the line.
If the alarm is silent then all is well.
\begin{zed}
  AlarmState ::= sounding | silent
\end{zed}

Defines the amount of medicine put in the line
when it is filled up.
\begin{axdef}
  fillAmount: \nat
\where
  fillAmount = 2
\end{axdef}

Defines the initial rate when the system initializes
\begin{axdef}
  initRate: \nat
\where
  initRate = 1
\end{axdef}

This schema represents the current amount of medicine 
on a specific line. The invariants ensure that in all
cases where the line has a problem, the alarm is sounding
and in all cases where the line has no problems, the alarm
is silent.
\begin{schema}{MedicineLine}
  medicineAmount: \nat \\
  currentProblems : \power Problem\\
  alarm : AlarmState \\
  rate : \nat %added this
  \where
  currentProblems \neq \emptyset \implies alarm = sounding\\
  currentProblems = \emptyset \implies alarm = silent
\end{schema}

The initial state of the medicine on a line is to be empty
\begin{schema}{InitMedicineLine}
  MedicineLine
\where
  rate = initRate \\ %added this
  medicineAmount = 0 \\
  currentProblems = \emptyset
\end{schema}

This function takes a new rate for the machine to dispense
medicine at and sets it to be the current rate.
All other variables remain the same.
\begin{schema}{SetRate}
  \Delta MedicineLine\\
  newRate? : \nat
\where
  rate' = newRate?\\
  medicineAmount' = medicineAmount\\
  currentProblems' = currentProblems\\
  alarm' = alarm
\end{schema}


The action modelling refilling the medicine in a line.
It can be done at any time and fills the medicine 
back up to the fillAmount.
\begin{schema}{RefillLine}
  \Delta MedicineLine
\where
  medicineAmount' = fillAmount \\
  currentProblems' = currentProblems \setminus \{out\_of\_medicine\}\\
  rate' = rate %added this
\end{schema}

\begin{schema}{FixOcclusion}
  \Delta MedicineLine
\where
  occlusion \in currentProblems\\
  currentProblems' = currentProblems \setminus \{occlusion\}\\
  medicineAmount' = medicineAmount\\
  rate' = rate %added this
\end{schema}

The dispense medicince action dispenses one unit of 
medicine per action.  It requires that the amount
of medicine in the line is greater than 0.
\begin{schema}{SuccessfulDispenseMedicine}
  \Delta MedicineLine
\where
  currentProblems = \emptyset\\
  medicineAmount > 0 \\
  (medicineAmount \geq rate \land medicineAmount' = medicineAmount - rate) \lor\\ %added this
  (medicineAmount < rate \land medicineAmount' = 0)\\ %added this
  rate' = rate\\ %added this
  currentProblems' = currentProblems
\end{schema}

This function models the medicine dispensing becoming 
blocked.  The schema has the same pre states as the 
SuccessfulDispenseMedicine schema
\begin{schema}{DispenseMedicineGetsBlocked} 
  \Delta MedicineLine
\where
  currentProblems = \emptyset\\
  medicineAmount > 0 \\
  medicineAmount' = medicineAmount \\
  rate' = rate\\ 
  currentProblems' = currentProblems \cup \{occlusion\}  
\end{schema}


This function modles the line attempting to
dispense medicine while the line is out of 
medicine. 
\begin{schema}{AttemptDispenseWhenOutOfMedicine} 
  	\Delta MedicineLine
\where
  currentProblems = \emptyset\\
	medicineAmount = 0\\
	medicineAmount' = medicineAmount\\
	rate' = rate\\ %added this
	currentProblems' = currentProblems \cup \{out\_of\_medicine\}
\end{schema}

This schema prevents dispensing any medicine
when there is a problem.
\begin{schema}{AttemptDispenseWithProblem} 
  	\Xi MedicineLine
\where
  currentProblems \neq \emptyset\\
\end{schema}

This schema represents the ability of the line to become
blocked while dispensing but also allows the line to 
dispense medicince successfully.
\begin{zed}
  NonDeterministicDispenseMedicine == SuccessfulDispenseMedicine \lor DispenseMedicineGetsBlocked  
\end{zed}

This schema represents all possible outcomes when trying to
dispense medicine under various conditions.
\begin{zed} 
  RDispenseMedicine == NonDeterministicDispenseMedicine \lor AttemptDispenseWhenOutOfMedicine \lor AttemptDispenseWithProblem
\end{zed}

PowerSupplyState is the type of power the pump is recieving.
wall\_power corresponds to getting power from a wall socket,
battery\_power corresponds to getting power from a battery,
no\_power means the device has no power.
\begin{zed}
  PowerSupplyState ::= wall\_power | battery\_power | no\_power
\end{zed}

Refill medicine can be done in any power state but DispenseMedicine
requires power

\begin{zed}
  BatteryState ::= charged | not\_properly\_charged
\end{zed}

LockedState is the state of the pump to know if it is locked or not.
\begin{zed}
  LockedState ::= locked | unlocked
\end{zed}


Defines the conditions were the pump has power:
meaning: the pump has power if it does not have no power.
(defined with double negative).
\begin{schema}{HasPower}
  powerState : PowerSupplyState
\where
  powerState \neq no\_power
\end{schema}

%This schema defines a pump which contains a certain number
%of lines and a current power state and a locked state
\begin{schema}{Pump}
  lines : \seq MedicineLine \\
  powerState: PowerSupplyState \\
  batteryState: BatteryState \\
  lockedState: LockedState\\
\where
  lines \neq \emptyset
\end{schema}

%Defines the conditions when there is an electrical failure.
%In that case, the power state will transfer over to 
%battery power if battery is charged, otherwise the pump will
%lose power.
\begin{schema}{ElectricalFailure}
  \Delta Pump
\where
  powerState = wall\_power \\
  (batteryState = charged \land powerState' = battery\_power) \lor \\
  (batteryState = not\_properly\_charged \land powerState' = no\_power) \\
  (lines' = lines) \land (batteryState' = batteryState)
\end{schema}

%Define the condition when the battery runs of power
\begin{schema}{OutOfBattery}
  \Delta Pump
\where
  powerState = battery\_power \\
  batteryState = charged \\
  powerState' = no\_power \\
  batteryState = not\_properly\_charged \\
  lines' = lines
\end{schema}

%Define the action of charging battery
\begin{schema}{ChargeBattery}
  \Delta Pump
\where
  batteryState' = charged \\
  powerState' = powerState \\
  lines' = lines
\end{schema}


%Defines error conditions.  ok means action was successful.
%no\_power\_error means that the pump did not have power
%\begin{zed}
%  ErrorCheck ::= ok | no\_power\_error
%\end{zed}




%This schema defines a pump with one medicine line
%in initialized state
\begin{schema}{InitialSingleLinePump}
  Pump \\
  MedicineLine
\where
  lines = \langle (\theta InitMedicineLine) \rangle \\
  powerState = wall\_power \\
  batteryState = not\_properly\_charged \\
  lockedState = unlocked
\end{schema}

%This schema defines a pump with two medicine lines 
%in initialized state
\begin{schema}{InitialDoubleLinePump}
  Pump \\
  MedicineLine
\where
  lines = \langle (\theta InitMedicineLine), (\theta InitMedicineLine) \rangle \\
  powerState = wall\_power \\
  batteryState = not\_properly\_charged \\
  lockedState = unlocked
\end{schema}

%This schema defines a pump with three medicine lines 
%in initialized state
\begin{schema}{InitialTripleLinePump}
  Pump \\
  MedicineLine
\where
  lines = \langle (\theta InitMedicineLine), (\theta InitMedicineLine), (\theta InitMedicineLine) \rangle \\
  powerState = wall\_power \\
  batteryState = not\_properly\_charged \\
  lockedState = unlocked
\end{schema}

%This schema defines how power effects dispensing medication.
%Specifically, this case covers the situation where
%the medicine is successful dispensed because a power
%source is available.  This states the pump must have
%power to dispense medicine
%\begin{zed}
%  DispenseMedicineWithPower == HasPower \land DispenseMedicine
%\end{zed}



Defines the conditions were the pump is locked
\begin{schema}{IsLocked}
  pumpIsLocked : LockedState
\where
  pumpIsLocked = locked
\end{schema}



\end{document}
